<%
include('/extensions/assets/webapp/modules/jagg/jagg.jag');
var manager = jagg.module("manager");
var storeHostObj = manager.getAPIStoreObj();
var auditLog = require('/modules/auditLog/logger.js');

(function () {
    var log = new Log(),
            MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils,
            MultitenantConstants = Packages.org.wso2.carbon.base.MultitenantConstants,
            configs = require('/config/store.json'),
            samlResponse = request.getParameter('SAMLResponse'),
            sessionId = session.getId(),
            samlRequest = request.getParameter('SAMLRequest'),
            relayStateId = decodeURIComponent(request.getParameter('RelayState')),
            sso = require('sso'),
            server = require('carbon').server,
            samlRespObj,
            caramel = require('caramel'),
            carbon = require('carbon'),
            contextPath = caramel.configs().context,
            reversProxyEnabled = caramel.configs().reverseProxyEnabled,
            reverseProxyHost = caramel.configs().reverseProxyHost;

    var keyStoreName = configs.ssoConfiguration.keyStoreName;
    var keyStorePassword = configs.ssoConfiguration.keyStorePassword;
    var identityAlias = configs.ssoConfiguration.identityAlias;
    var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
    if (keyStorePassword == null || keyStorePassword == "") {
        keyStorePassword = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Password");
    }
    if (identityAlias == null || identityAlias == "") {
        identityAlias = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.KeyAlias");
    }
    if (keyStoreName == null || keyStoreName == "") {
        keyStoreName = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Location");
    } else {
        keyStoreName = process.getProperty('carbon.home') + keyStoreName;
    }
    var keyStoreProps = {
                KEY_STORE_NAME: keyStoreName,
                KEY_STORE_PASSWORD: keyStorePassword,
                IDP_ALIAS: identityAlias
            },
            sso_sessions = application.get('sso_sessions'),
            attr = configs.ssoConfiguration;

    var AuthService = require('../extensions/assets/webapp/services/authentication.js').serviceModule;
    var authenticator = new AuthService.Authenticator();
    var assetOverviewPageMatcher = '/{context}/assets/{type}/{id}'
    var tenantedAssetOverviewPageMatcher = '/{context}/t/{domain}/assets/{type}/{id}'
    authenticator.init(jagg, session);


    if (!sso_sessions) {
        application.put('sso_sessions', {});
        sso_sessions = application.get('sso_sessions');
    }

    if (samlResponse != null) {
        samlRespObj = sso.client.getSamlObject(samlResponse);
        if (!samlRespObj) {
            log.error('SAML response object validation failure.');
            response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
            return;
        }
        if (!sso.client.isLogoutResponse(samlRespObj)) {

            var relayStates = application.get("relayStates");
            var relayState;

            // Send an error if the relay state can't be found.
            if(!relayStates || !(relayState = relayStates[relayStateId])){
              log.error('Relay state for the id ' + relayStateId + " can't be found.");
              response.sendError(500, 'Relay state is not present.');
              return;
            }

            // Decode the SAML response.
            var sessionObj = sso.client.decodeSAMLLoginResponse(samlRespObj, samlResponse, sessionId);

            if(!sessionObj.sessionIndex || sessionObj.sessionIndex === 'undefined'){
              log.error('sessionIndex is not present in the SAML response.');
              response.sendError(500, 'sessionIndex is not present in the SAML response.');
              return;
            }

            var username = sessionObj.loggedInUser;
            var userTenantDomain = MultitenantUtils.getTenantDomain(username);

            // Remove the tenant domain from the user name for the super tenant.
            if (username.indexOf("@carbon.super") > -1) {
                username = username.replace("@carbon.super", "");
            }

            // Load tenant registry for non super tenant users.
            if (userTenantDomain != null && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(userTenantDomain)) {
                jagg.module("manager").loadTenantRegistry(String(userTenantDomain));
            }

            // Validate the SAML response. (e.g. the signature)
            if (!sso.client.validateSamlResponse(samlRespObj, attr, keyStoreProps)) {
                log.error('SAML response object validation failure.');
                response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
                return;
            }

            // Check whether the logged in user belongs to the application tenant domain.
            var applicationTenantDomain = relayState.applicationTenantDomain;

            if (applicationTenantDomain != userTenantDomain) {
                log.warn('User ' + sessionObj.loggedInUser + ' does not have permission to access the tenant domain : '
                + applicationTenantDomain + '. Make sure the user is registered in the tenant domain');
                response.sendError(403, 'You do not have permission to login to this tenant domain.Please register first.');
                return;
            }

            if (userTenantDomain != null && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(userTenantDomain)) {
                var service = server.osgiService('org.wso2.carbon.utils.ConfigurationContextService');
                var ctx = service.getServerConfigContext();
                var TenantAxisUtils = org.wso2.carbon.core.multitenancy.utils.TenantAxisUtils;
                TenantAxisUtils.setTenantAccessed(userTenantDomain, ctx);
            }

            var tenantId = carbon.server.tenantId({
                domain: userTenantDomain
            });

            session.put("LOGGED_IN_USER", sessionObj.loggedInUser);
            session.put("Loged", "true");
            session.put("tenantId", tenantId);

            log.info("Loged = " + session.get("Loged"));

            username = username + "";
            var userDetails = {};
            userDetails['username'] = username;
            userDetails['action'] = "SSOLogin";
            authResult = authenticator.login(userDetails);
            sso_sessions[sessionObj.sessionId] = sessionObj.sessionIndex;

            // Fire tenant load and login events.
            require('/modules/role.js').checkeRole(username, session);

            auditLog.writeLog(tenantId, username, "UserSignedIn", "Login", "", "", "");

            var redirectURL = relayState.requestedURL;

            if(!redirectURL){
              redirectURL = contextPath;
            }

            response.sendRedirect(redirectURL);
        } else {
            session.invalidate();
            var redirectUrl = relayState;

            // We don't need to handle the presence of the reverse proxy here.
            // The relayState already contains the reverse proxy friendly URL.
            response.sendRedirect(redirectUrl);
        }
    }

    // If saml request is a log out request, then invalidate session.
    if (samlRequest != null) {
        var index = sso.client.decodeSAMLLogoutRequest(sso.client.getSamlObject(samlRequest));
        if (log.isDebugEnabled()) {
            log.debug('Backend logout recieved from store the index is - ' + index);
        }
        var jSessionId = application.get('sso_sessions')[index];
        delete application.get('sso_sessions')[index];
        if (log.isDebugEnabled()) {
            log.debug('store Session Id :::' + jSessionId);
        }
        session.invalidate();
    }
}());
%>
